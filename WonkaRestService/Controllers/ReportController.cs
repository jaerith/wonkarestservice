using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

using WonkaRestService.Cache;
using WonkaRestService.Models;

namespace WonkaRestService.Controllers
{
    public class ReportController : ApiController
    {
        /// <summary>
        /// 
        /// This method will return reports generated by invoking a RuleTree on the chain and stored in the cache.
        /// 
        /// <param name="RuleTreeId">The ID of the RuleTree whose reports should be returned</param>
        /// <param name="OnlyWithErrors">Indicates whether or not only reports with errors should be returned</param>
        /// <returns>Contains the Response with the list of reports that were created by RuleTreeId</returns>
        /// </summary>
        public HttpResponseMessage Get(string RuleTreeId = null, string GroveId = null, bool OnlyWithErrors = false)
        {
            List<SvcRuleTreeReport> RuleTreeReports = new List<SvcRuleTreeReport>();

            var response = Request.CreateResponse<List<SvcRuleTreeReport>>(HttpStatusCode.OK, RuleTreeReports);

            string uri = Url.Link("DefaultApi", new { id = "DefaultValue" });

            response.Headers.Location = new Uri(uri);

            try
            {
                WonkaServiceCache ServiceCache = WonkaServiceCache.GetInstance();

                if (String.IsNullOrEmpty(RuleTreeId) && String.IsNullOrEmpty(GroveId))
                    throw new Exception("ERROR!  Neither a RuleTree ID nor a Grove ID was provided.");

                if (!String.IsNullOrEmpty(RuleTreeId))
                {
                    if (ServiceCache.RuleTreeCache.ContainsKey(RuleTreeId))
                    {
                        if (OnlyWithErrors)
                            RuleTreeReports = ServiceCache.ReportCache[RuleTreeId].Where(x => x.RuleSetsWithFailures.Count > 0).ToList();
                        else
                            RuleTreeReports = ServiceCache.ReportCache[RuleTreeId];
                    }
                    else if (RuleTreeId == "TEST")
                    {
                        SvcRuleTreeReport TestReport =
                            new SvcRuleTreeReport(false) { InvocationTime = DateTime.Now, ExecutionGasCost = 1111111, OverallRuleTreeResult = 0 };

                        TestReport.RecordData = new System.Collections.Hashtable();
                        TestReport.RecordData["RuleTreeId"] = "TestTree";
                        TestReport.RecordData["TestKey"]    = "TestValue";

                        RuleTreeReports.Add(TestReport);
                    }
                }
                else if (!String.IsNullOrEmpty(GroveId))
                {
                    var AllGroveReports = 
                        ServiceCache.ReportCache.Where(x => ServiceCache.RuleTreeCache[x.Key].GroveId == GroveId).ToList();

                    AllGroveReports.ForEach(x => RuleTreeReports.AddRange(x.Value));

                    if (OnlyWithErrors)
                        RuleTreeReports = RuleTreeReports.Where(x => x.RuleSetsWithFailures.Count > 0).ToList();
                }

                response = Request.CreateResponse<List<SvcRuleTreeReport>>(HttpStatusCode.Created, RuleTreeReports);
            }
            catch (Exception ex)
            {
                string sErrorMsg = String.Format("ERROR!  Report web method -> Error Message : {0}",
                                                 ex.ToString());

                response = Request.CreateResponse<List<SvcRuleTreeReport>>(HttpStatusCode.BadRequest, RuleTreeReports);

                Elmah.ErrorSignal.FromCurrentContext().Raise(ex);
            }

            return response;
        }
    }
}
